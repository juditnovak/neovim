#!/usr/bin/env bash
#
# usage: ./scripts/update_terminfo.sh
#
# This script does:
#
#   1. Download Dickey's terminfo.src
#   2. Compile temporary terminfo database from terminfo.src
#   3. Use database to generate src/nvim/tui/terminfo_defs.h
#

set -e

url='https://invisible-island.net/datafiles/current/terminfo.src.gz'
target_defs='src/nvim/tui/terminfo_defs.h'
target_data='src/nvim/tui/terminfo_data.h'

readonly -A entries=(
  [ansi]=ansi_terminfo
  [interix]=interix_8colour_terminfo
  [iterm2]=iterm_256colour_terminfo
  [linux]=linux_16colour_terminfo
  [putty-256color]=putty_256colour_terminfo
  [rxvt-256color]=rxvt_256colour_terminfo
  [screen-256color]=screen_256colour_terminfo
  [st-256color]=st_256colour_terminfo
  [tmux-256color]=tmux_256colour_terminfo
  [vte-256color]=vte_256colour_terminfo
  [xterm-256color]=xterm_256colour_terminfo
  [cygwin]=cygwin_terminfo
  [win32con]=win32con_terminfo
  [conemu]=conemu_terminfo
  [vtpcon]=vtpcon_terminfo
)

db="$(mktemp -du)"
# OFFLINE DEV
# db=terminfo/terminfo.db

print_bold() {
  printf "\\e[1m%b\\e[0m" "$*"
}

cd "$(git rev-parse --show-toplevel)"

#
# Get terminfo.src
#
print_bold '[*] Get terminfo.src\n'
curl -O "$url"
gunzip -f terminfo.src.gz

#
# Build terminfo database
#
print_bold '[*] Build terminfo database\n'
cat terminfo.src scripts/windows.ti | tic -x -o "$db" -
rm -f terminfo.src

#
# Write src/nvim/tui/terminfo_defs.h
#
print_bold "[*] Writing $target_defs... \n"
sorted_terms="$(echo "${!entries[@]}" | tr ' ' '\n' | sort | xargs)"

cat > "$target_defs" <<EOF
// uncrustify:off

// Generated by scripts/update_terminfo.sh and $(tic -V)

#pragma once

#include <stdint.h>
#include <unibilium.h>
EOF

for term in $sorted_terms; do
  path="$(find "$db" -name "$term")"
  if [ -z "$path" ]; then
    >&2 echo "Not found: $term. Skipping."
    continue
  fi
  printf '\n'
  infocmp -L -x -1 -A "$db" "$term" | sed -e '1d' -e 's#^#// #' | tr '\t' ' '
  printf 'static const int8_t %s[] = {\n' "${entries[$term]}"
  printf '  '
  od -v -t d1 < "$path" | cut -c9- | xargs | tr ' ' ','
  printf '};\n'
done >> "$target_defs"


print_bold "[*] Writing $target_data... "

HEADER="// uncrustify:off

// Generated by scripts/update_terminfo.sh and $(tic -V)

#pragma once

#include <stdbool.h>
#include <stdint.h>
"

for term in $sorted_terms; do
  path="$(find "$db" -name "$term")"
  if [ -z "$path" ]; then
    >&2 echo "Not found: $term. Skipping."
    continue
  fi
  printf '\n'

  INFCMP=$(infocmp -L -x -1 -c -sl -A "$db" "$term" | grep -v "comparing" | tail -n +3)

  # Bools
  BOOLS=$(echo "$INFCMP" | \
    grep "= [FT]" | \
    sed -s 's/= F/=false/' | \
    sed -e 's/= T/=true/' | \
    sed -e 's/\.$/,/' | \
    sed -e 's/= /=/')

  if [ "$BOOLS" != "" ]
  then
    printf 'static terminfo_data_bool %s_bool = {\n' "${entries[$term]}"
    echo "$BOOLS"
    printf '};\n'
  fi

  # Integers

  INTS=$(echo "$INFCMP" | \
    grep "= [0-9]" | \
    sed -e 's/\.$/,/' | \
    sed -e 's/= /=/')

  if [ "$INTS" != "" ]
  then
    printf 'static terminfo_data_int %s_int = {\n' "${entries[$term]}"
    echo "$INTS"
    printf '};\n'
  fi

  # Strings
  STRS=$(echo "$INFCMP" | \
    grep -v "= [FT]" | \
    grep -v "= [0-9]" | \
    sed -e 's/= /=/' | \
    sed -e 's/\.$/,/' | \
    sed -e 's/\x27/"/g' | \
    sed -e 's/\\E/\\033/g' | \
    sed -e 's/\^G/\\x07/g' | \
    sed -e 's/\^H/\\x08/g' | \
    sed -e 's/\^I/\\x09/g' | \
    sed -e 's/\^J/\\x10/g' | \
    sed -e 's/\^K/\\x11/g' | \
    sed -e 's/\^L/\\x12/g' | \
    sed -e 's/\^M/\\x13/g' | \
    sed -e 's/\\n/\\x13/g' | \
    sed -e 's/\\"/"/')

  if [ "$STRS" != "" ]
  then
    printf 'static terminfo_data_str %s_str = {\n' "${entries[$term]}"
    echo "$STRS"
    printf '};\n\n'
  fi

  printf 'static const struct terminfo_data %s = {\n' "${entries[$term]}"

  if [ "$BOOLS" != "" ]
  then
    printf '    .term_bools = &%s_bool,\n' "${entries[$term]}"
  fi

  if [ "$INTS" != "" ]
  then
    printf '    .term_ints = &%s_int,\n' "${entries[$term]}"
  fi

  if [ "$STRS" != "" ]
  then
    printf '    .term_strs = &%s_str,\n' "${entries[$term]}"
  fi

  printf '};\n'

done > "$target_data"


# Supporting enums and data structures for non-unilibium usage

bools=$(grep "true\|false" < "$target_data" | cut -d= -f1 | sort -u)
ints=$(grep "=[0-9][0-9]*,$" < "$target_data" | cut -d= -f1 | sort -u)
strs=$(grep '="' < "$target_data" | cut -d= -f1 | sort -u)

bools_arr=($bools) 
ints_arr=($ints) 
strs_arr=($strs) 
bools_num=${#bools_arr[@]}
ints_num=${#ints_arr[@]}
strs_num=${#strs_arr[@]}

strs_ext="$strs"
if [[ $strs != *"set_left_margin"* ]]
then
 strs_ext+=" set_left_margin_parm" 
fi

if [[ $strs != *"set_right_margin"* ]]
then
 strs_ext+=" set_right_margin_parm" 
fi

if [[ $strs != *"set_tb_margin"* ]]
then
 strs_ext+=" set_tb_margin" 
fi

if [[ $strs != *"from_status_line"* ]]
then
 strs_ext+=" from_status_line" 
fi

if [[ $strs != *"to_status_line"* ]]
then
 strs_ext+=" to_status_line" 
fi

STRUCT+=$'typedef enum {\n'
for boolvar in ${bools}
do
  STRUCT+=$"\ttdata_${boolvar},\n"
done
STRUCT+=$'} terminfo_data_bool_enum;\n\n'

STRUCT+=$'typedef enum {\n'
for intvar in ${ints}
do
  STRUCT+=$"\ttdata_${intvar},\n";
done
STRUCT+=$'} terminfo_data_int_enum;\n\n'

STRUCT+=$'typedef enum {\n'
for strvar in ${strs_ext}
do
  STRUCT+=$"\ttdata_${strvar},\n";
done
STRUCT+=$'} terminfo_data_str_enum;\n\n'

UNIBI_STRUCT="${STRUCT}"

STRUCT+=$"typedef bool terminfo_data_bool[$bools_num];\n"
STRUCT+=$"typedef int terminfo_data_int[$ints_num];\n"
STRUCT+=$"typedef char *terminfo_data_str[$strs_num];\n"

STRUCT+=$'\n\n'

STRUCT+=$'static char * const terminfo_data_bool_names[] = {\n'
for boolvar in ${bools}
do
  STRUCT+=$"\t[tdata_${boolvar}]=\"${boolvar}\",\n"
done
STRUCT+=$'};\n\n'

STRUCT+=$'static char * const terminfo_data_int_names[] = {\n'
for intvar in ${ints}
do
  STRUCT+=$"\t[tdata_${intvar}] = \"${intvar}\",\n";
done
STRUCT+=$'};\n\n'

STRUCT+=$'static char * const terminfo_data_str_names[] = {\n'
for strvar in ${strs}
do
  STRUCT+=$"\t[tdata_${strvar}] = \"${strvar}\",\n";
done
STRUCT+=$'};\n\n\n'


STRUCT+="struct terminfo_data {\n"
STRUCT+="    terminfo_data_bool *term_bools;\n"
STRUCT+="    terminfo_data_int *term_ints;\n"
STRUCT+="    terminfo_data_str *term_strs;\n"
STRUCT+="};\n\n"


echo -e "${HEADER}\n\n${STRUCT}\n" | cat - "$target_data" | sed -E 's/(\s+)([[:alnum:]_]+)=/\1[tdata_\2]=/' > temp && mv temp "$target_data"


# Translation between local enums and unilibium enums for unilibium usage
UNIBI_STRUCT+=$'static const int tr_unibi_bools_enum[] = {\n'
for boolvar in ${bools}
do
  if [[ ! ${boolvar} =~ [A-Z][A-Z] ]]
  then
    UNIBI_STRUCT+=$"\t[tdata_${boolvar}]=unibi_${boolvar},\n"
  fi
done
UNIBI_STRUCT+=$'};\n\n'

UNIBI_STRUCT+=$'static const int tr_unibi_ints_enum[] = {\n'
for intvar in ${ints}
do
  UNIBI_STRUCT+=$"\t[tdata_${intvar}]=unibi_${intvar},\n"
done
UNIBI_STRUCT+=$'};\n\n'

UNIBI_STRUCT+=$'static const int tr_unibi_strs_enum[] = {\n'
for strvar in ${strs_ext}
do
  if [[ ${#strvar} -gt 2 ]] && 
    [[ ! ${strvar} =~ k[a-z][0-9] ]] && 
    [[ ! ${strvar} =~ kD[CN][0-9] ]] && 
    [[ ! ${strvar} =~ kEND* ]] &&
    [[ ! ${strvar} =~ kDN* ]] &&
    [[ ! ${strvar} =~ kPRV[0-9] ]] &&
    [[ ! ${strvar} =~ kIC[0-9] ]] &&
    [[ ! ${strvar} =~ kLFT[0-9] ]] &&
    [[ ! ${strvar} =~ kRIT[0-9] ]] &&
    [[ ! ${strvar} =~ kUP[0-9]* ]] &&
    [[ ! ${strvar} =~ kNXT[0-9] ]] &&
    [[ ! ${strvar} =~ kHOM[0-9] ]] &&
    [[ ! ${strvar} =~ kp[A-Z][A-Z][A-Z] ]] &&
    [[ ! ${strvar} == *mxx ]]
  then
    UNIBI_STRUCT+=$"\t[tdata_${strvar}]=unibi_${strvar},\n"
  fi
done
UNIBI_STRUCT+=$'};\n\n\n'

echo -e "$UNIBI_STRUCT" >>"$target_defs" 

print_bold 'done\n'
